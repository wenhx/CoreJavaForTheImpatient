Serialization was intended for sending objects from one virtual machine to another, or for
short-term persistence of state. If you use serialization for long-term persistence, or in any
situation where classes can change between serialization and deserialization, you will need
to consider what happens when your classes evolve. Can version 2 read the old data? Can
the users who still use version 1 read the files produced by the new version?
The serialization mechanism supports a simple versioning scheme. When an object is
serialized, both the name of the class and its serialVersionUID are written to the
object stream. That unique identifier is assigned by the implementor, by defining an
instance variable
Click here to view code image
private static final long serialVersionUID = 1L; // Version 1
When the class evolves in an incompatible way, the implementor should change the UID.
Whenever a deserialized object has a nonmatching UID, the readObject method
throws an InvalidClassException.
If the serialVersionUID matches, deserialization proceeds even if the
implementation has changed. Each nontransient instance variable of the object to be read
is set to the value in the serialized state, provided that the name and type match. All other
instance variables are set to the default: null for object references, zero for numbers, and
false for boolean values. Anything in the serialized state that doesn??t exist in the
object to be read is ignored.
Is that process safe? Only the implementor of the class can tell. If it is, then the
implementor should give the new version of the class the same serialVersionUID as
the old version.
If you don??t assign a serialVersionUID, one is automatically generated by hashing a
canonical description of the instance variables, methods, and supertypes. You can see the
hash code with the serialver utility. The command
serialver ch09.sec05.Employee
displays
Click here to view code image
private static final long serialVersionUID = -4932578720821218323L;
When the class implementation changes, there is a very high probability that the hash code
changes as well.
If you need to be able to read old version instances, and you are certain that is safe to do
so, run serialver on the old version on your class and add the result to the new
version.