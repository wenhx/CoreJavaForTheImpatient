Streams provide a view of data that lets you specify computations at a higher conceptual
level than with collections. With a stream, you specify what you want to have done, not
how to do it. You leave the scheduling of operations to the implementation. For example,
suppose you want to compute the average of a certain property. You specify the source of
data and the property, and the stream library can then optimize the computation, for
example by using multiple threads for computing sums and counts and combining the
results.
The key points of this chapter are:
• Iterators imply a specific traversal strategy and prohibit efficient concurrent
execution.
• You can create streams from collections, arrays, generators, or iterators.
• Use filter to select elements and map to transform elements.
• Other operations for transforming streams include limit, distinct, and
sorted.
• To obtain a result from a stream, use a reduction operator such as count, max,
min, findFirst, or findAny. Some of these methods return an Optional
value.
• The Optional type is intended as a safe alternative to working with null values.
To use it safely, take advantage of the ifPresent and orElse methods.
• You can collect stream results in collections, arrays, strings, or maps.
• The groupingBy and partitioningBy methods of the Collectors class
allow you to split the contents of a stream into groups, and to obtain a result for each
group.
• There are specialized streams for the primitive types int, long, and double.
• Parallel streams automatically parallelize stream operations.

When you process a collection, you usually iterate over its elements and do some work
with each of them. For example, suppose we want to count all long words in a book. First,
let’s put them into a list:
With streams, the same operation looks like this:
Now you don’t have to scan the loop for evidence of filtering and counting. The method
names tell you right away what the code intends to do. Moreover, where the loop
prescribes the order of operations in complete detail, a stream is able to schedule the
operations any way it wants, as long as the result is correct.
Simply changing stream into parallelStream allows the stream library to do the
filtering and counting in parallel.
Streams follow the “what, not how” principle. In our stream example, we describe what
needs to be done: get the long words and count them. We don’t specify in which order, or
in which thread, this should happen. In contrast, the loop at the beginning of this section
specifies exactly how the computation should work, and thereby forgoes any chances of
optimization.
A stream seems superficially similar to a collection, allowing you to transform and
retrieve data. But there are significant differences:
1. A stream does not store its elements. They may be stored in an underlying collection
or generated on demand.
2. Stream operations don’t mutate their source. For example, the filter method
does not remove elements from a new stream, but it yields a new stream in which
they are not present.
3. Stream operations are lazy when possible. This means they are not executed until
their result is needed. For example, if you only ask for the first five long words
instead of all, the filter method will stop filtering after the fifth match. As a
consequence, you can even have infinite streams!
Let us have another look at the example. The stream and parallelStream methods
yield a stream for the words list. The filter method returns another stream that
contains only the words of length greater than twelve. The count method reduces that
stream to a result.
This workflow is typical when you work with streams. You set up a pipeline of operations
in three stages:
1. Create a stream.
2. Specify intermediate operations for transforming the initial stream into others,
possibly in multiple steps.
3. Apply a terminal operation to produce a result. This operation forces the execution
of the lazy operations that precede it. Afterwards, the stream can no longer be used.
In our example, the stream was created with the stream or parallelStream method.
The filter method transformed it, and count was the terminal operation.
In the next section, you will see how to create a stream. The subsequent three sections deal
with stream transformations. They are followed by five sections on terminal operations
Education
Eulogia
Audiovisual
Equatorial
Autobiographiest
Euphoria
It's strange that the Scanner misses the last word. Remove this line and you can reproduce this phenomenon. (For E08)